AudioWorkletProcessor.prototype._v3=function(){this._w3=true;this.port.onmessage=(_x3)=>{if(_x3.data==="kill")this._w3=false;};};class _y3 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1}];}constructor(){super();this._v3();}process(_z3,_A3,parameters){const input=_z3[0];const bypass=parameters.bypass;for(let c=0;c<input.length;++c){const _B3=input[c];for(let _C3=0;_C3<_B3.length;++_C3){const _D3=(bypass[_C3]!==undefined)?bypass[_C3]:bypass[0];
_A3[_D3][c][_C3]=_B3[_C3];}}return this._w3;}}class _E3 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"gain",automationRate:"a-rate",defaultValue:1,minValue:0}];}constructor(){super();this._v3();}process(_z3,_A3,parameters){const _F3=_z3[0];const _G3=_z3[1];const output=_A3[0];const gain=parameters.gain;for(let c=0;c<_G3.length;++c){const _B3=_G3[c];const _H3=output[c];for(let _C3=0;_C3<_B3.length;++_C3)_H3[_C3]=_B3[_C3];}for(let c=0;c<_F3.length;++c){const _B3=_F3[c];const _H3=output[c];
for(let _C3=0;_C3<_B3.length;++_C3){const _I3=(gain[_C3]!==undefined)?gain[_C3]:gain[0];_H3[_C3]+=_B3[_C3]*_I3;}}return this._w3;}}registerProcessor("audio-bus-input",_y3);registerProcessor("audio-bus-output",_E3);class _J3 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"gain",automationRate:"a-rate",defaultValue:1.0,minValue:0.0},{name:"factor",automationRate:"a-rate",defaultValue:20,minValue:1,maxValue:100}
,{name:"resolution",automationRate:"a-rate",defaultValue:8,minValue:2,maxValue:16},{name:"mix",automationRate:"a-rate",defaultValue:0.8,minValue:0.0,maxValue:1.0}];}static _K3=[undefined,undefined,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768];constructor(_L3){super();this._v3();const _M3=_L3.outputChannelCount[0];this._N3=new Float32Array(_M3);this._O3=new Uint32Array(_M3);}process(_z3,_A3,parameters){const input=_z3[0];const output=_A3[0];const bypass=parameters.bypass;const gain=parameters.gain;
const factor=parameters.factor;const resolution=parameters.resolution;const mix=parameters.mix;for(let c=0;c<input.length;++c){const _B3=input[c];const _H3=output[c];for(let _C3=0;_C3<_B3.length;++_C3){_H3[_C3]=_B3[_C3];if(this._O3[c]===0)this._N3[c]=_B3[_C3];const _P3=(factor[_C3]!==undefined)?factor[_C3]:factor[0];++this._O3[c];this._O3[c]%=_P3;const _D3=(bypass[_C3]!==undefined)?bypass[_C3]:bypass[0];if(_D3>0.0){continue;}let _Q3=this._N3[c];const _I3=(gain[_C3]!==undefined)?gain[_C3]:gain[0];_Q3*=_I3;_Q3=Math.max(Math.min(_Q3,
1.0),-1.0);const _R3=(resolution[_C3]!==undefined)?resolution[_C3]:resolution[0];const max=(_Q3>0.0)?_J3._K3[_R3]-1:_J3._K3[_R3];_Q3=Math.round(_Q3*max)/max;const _S3=(mix[_C3]!==undefined)?mix[_C3]:mix[0];_H3[_C3]*=(1.0-_S3);_H3[_C3]+=(_Q3*_S3);}}return this._w3;}}registerProcessor("bitcrusher-processor",_J3);class _T3{constructor(_U3=1e-3){this.setTime(_U3);}setTime(_U3){this._V3=Math.exp(-1/(_U3*sampleRate));}process(_W3,_X3){return _W3+this._V3*(_X3-_W3);}}class _Y3{constructor(_Z3,__3){this._04=new _T3(_Z3);
this._14=new _T3(__3);this._24=_Z3;this._34=__3;}_44(_U3){if(_U3===this._24)return;this._04.setTime(_U3);this._24=_U3;}_54(_U3){if(_U3===this._34)return;this._14.setTime(_U3);this._34=_U3;}process(_W3,_X3){if(_W3>_X3)return this._04.process(_W3,_X3);else return this._14.process(_W3,_X3);}}class _64 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"ingain",automationRate:"a-rate",defaultValue:1,minValue:0}
,{name:"threshold",automationRate:"a-rate",defaultValue:0.125,minValue:1e-3,maxValue:1},{name:"ratio",automationRate:"a-rate",defaultValue:4,minValue:1},{name:"attack",automationRate:"a-rate",defaultValue:0.05,minValue:1e-3,maxValue:1e-1},{name:"release",automationRate:"a-rate",defaultValue:0.25,minValue:1e-2,maxValue:1},{name:"outgain",automationRate:"a-rate",defaultValue:1,minValue:0}];}constructor(_74){super();this._v3();const _04=_64.parameterDescriptors.find(_84=>_84.name==="attack");const _14=_64.parameterDescriptors.find(_84=>_84.name==="release");
this._94=new _Y3(_04.defaultValue,_14.defaultValue);this._a4=0;}process(_b4,_c4,_d4){const input=_b4[0];const output=_c4[0];const bypass=_d4.bypass;const ingain=_d4.ingain;const outgain=_d4.outgain;const threshold=_d4.threshold;const ratio=_d4.ratio;const attack=_d4.attack;const release=_d4.release;if(input.length===0)return this._w3;for(let _C3=0;_C3<input[0].length;++_C3){let frame=input.map(_e4=>_e4[_C3]);output.forEach((_e4,_f4)=>{_e4[_C3]=frame[_f4];});const _g4=(ingain[_C3]!==undefined)?ingain[_C3]:ingain[0];
frame=frame.map(_h4=>_h4*=_g4);const rect=frame.map(_h4=>Math.abs(_h4));const max=Math.max(...rect);const _i4=_j4(max);const _k4=(threshold[_C3]!==undefined)?threshold[_C3]:threshold[0];const _l4=_j4(_k4);const _m4=Math.max(0,_i4-_l4);const _04=(attack[_C3]!==undefined)?attack[_C3]:attack[0];const _14=(release[_C3]!==undefined)?release[_C3]:release[0];this._94._44(_04);this._94._54(_14);this._a4=this._94.process(_m4,this._a4);const _D3=(bypass[_C3]!==undefined)?bypass[_C3]:bypass[0];if(_D3>0)continue;const _R3=(ratio[_C3]!==undefined)?ratio[_C3]:ratio[0];
const _n4=(this._a4/_R3)-this._a4;const _I3=_o4(_n4);frame=frame.map(_h4=>_h4*=_I3);const _p4=(outgain[_C3]!==undefined)?outgain[_C3]:outgain[0];frame=frame.map(_h4=>_h4*=_p4);output.forEach((_e4,_f4)=>{_e4[_C3]=frame[_f4];});}return this._w3;}}function _j4(_q4){return 20*Math.log10(_q4);}function _o4(_q4){return Math.pow(10,_q4/20);}registerProcessor("compressor-processor",_64);class _r4 extends AudioWorkletProcessor{static _s4=5.0;static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",
defaultValue:0,minValue:0,maxValue:1},{name:"time",automationRate:"a-rate",defaultValue:0.2,minValue:0.0,maxValue:_r4._s4},{name:"feedback",automationRate:"a-rate",defaultValue:0.5,minValue:0.0,maxValue:1.0},{name:"mix",automationRate:"a-rate",defaultValue:0.35,minValue:0.0,maxValue:1.0}];}constructor(_L3){super();this._v3();const _M3=_L3.outputChannelCount[0];const _t4=(_r4._s4*sampleRate)+1;this.buffer=new Array(_M3);this._u4=new Uint32Array(_M3);for(let c=0;c<_M3;++c)this.buffer[c]=new Float32Array(_t4);
}process(_z3,_A3,parameters){const input=_z3[0];const output=_A3[0];const bypass=parameters.bypass;const time=parameters.time;const feedback=parameters.feedback;const mix=parameters.mix;for(let c=0;c<input.length;++c){const _B3=input[c];const _H3=output[c];for(let _C3=0;_C3<_B3.length;++_C3){_H3[_C3]=_B3[_C3];const _k4=(time[_C3]!==undefined)?time[_C3]:time[0];const _v4=this._w4(c,_k4);const _P3=(feedback[_C3]!==undefined)?feedback[_C3]:feedback[0];const _x4=_B3[_C3]+(_v4*_P3);this.write(c,_x4);const _D3=(bypass[_C3]!==undefined)?bypass[_C3]:bypass[0];
if(_D3>0.0){continue;}const _S3=(mix[_C3]!==undefined)?mix[_C3]:mix[0];_H3[_C3]*=(1-_S3);_H3[_C3]+=(_v4*_S3);}}return this._w3;}_w4(_y4,_U3){const _z4=_U3*sampleRate;let _A4=(this._u4[_y4]-~~_z4);let _B4=(_A4-1);while(_A4<0)_A4+=this.buffer[_y4].length;while(_B4<0)_B4+=this.buffer[_y4].length;const frac=_z4-~~_z4;const _C4=this.buffer[_y4][_A4];const _D4=this.buffer[_y4][_B4];return _C4+(_D4-_C4)*frac;}write(_y4,_E4){++this._u4[_y4];this._u4[_y4]%=this.buffer[_y4].length;this.buffer[_y4][this._u4[_y4]]=_E4;
}}registerProcessor("delay-processor",_r4);class _F4 extends AudioWorkletProcessor{static get parameterDescriptors(){return [];}constructor(){super();this._v3();}process(_G4,_H4,_I4){const input=_G4[0];const _J4=_H4[0];const _K4=_H4[1];for(let c=0;c<input.length;++c){const _B3=input[c];const _L4=_J4[c];const _M4=_K4[c];for(let _C3=0;_C3<_B3.length;++_C3){_L4[_C3]=_B3[_C3];_M4[_C3]=_B3[_C3];}}return this._w3;}}class _N4 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",
defaultValue:0,minValue:0,maxValue:1}];}constructor(){super();this._v3();}process(_G4,_H4,_I4){const _F3=_G4[0];const _G3=_G4[1];const output=_H4[0];const bypass=_I4.bypass;for(let c=0;c<_G3.length;++c){const _O4=_F3[c];const _P4=_G3[c];const _H3=output[c];for(let _C3=0;_C3<_O4.length;++_C3){const _D3=(bypass[_C3]!==undefined)?bypass[_C3]:bypass[0];if(_D3>0){_H3[_C3]=_P4[_C3];}else {_H3[_C3]=_O4[_C3];}}}return this._w3;}}registerProcessor("eq-input",_F4);registerProcessor("eq-output",_N4);class _Q4 extends AudioWorkletProcessor{
static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"gain",automationRate:"a-rate",defaultValue:0.5,minValue:0.0}];}constructor(){super();this._v3();}process(_z3,_A3,parameters){const input=_z3[0];const output=_A3[0];const bypass=parameters.bypass;const gain=parameters.gain;for(let c=0;c<input.length;++c){const _B3=input[c];const _H3=output[c];for(let _C3=0;_C3<_B3.length;++_C3){_H3[_C3]=_B3[_C3];const _D3=(bypass[_C3]!==undefined)?bypass[_C3]:bypass[0];
if(_D3>0.0){continue;}const _I3=(gain[_C3]!==undefined)?gain[_C3]:gain[0];_H3[_C3]*=_I3;}}return this._w3;}}registerProcessor("gain-processor",_Q4);class _R4 extends AudioWorkletProcessor{static get parameterDescriptors(){const _S4=sampleRate*0.45;return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(5000.0,_S4),minValue:10.0,maxValue:_S4},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0}
,{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(_L3){super();this._v3();const _M3=_L3.outputChannelCount[0];this._T4=0;this._U4=0;this._V4=0;this._W4=0;this._X4=0;this._Y4=new Float32Array(_M3);this._Z4=new Float32Array(_M3);this.__4=new Float32Array(_M3);this._05=new Float32Array(_M3);this._15=-1;this._25=-1;this._35=-1;}process(_z3,_A3,parameters){const input=_z3[0];const output=_A3[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;
const _45=(freq.length===1&&q.length===1&&gain.length===1);if(_45)this._55(freq[0],q[0],gain[0]);for(let c=0;c<input.length;++c){const _B3=input[c];const _H3=output[c];for(let _C3=0;_C3<_B3.length;++_C3){if(_45===false){const _P3=(freq[_C3]!==undefined)?freq[_C3]:freq[0];const _65=(q[_C3]!==undefined)?q[_C3]:q[0];const _I3=(gain[_C3]!==undefined)?gain[_C3]:gain[0];this._55(_P3,_65,_I3);}const _75=this._V4*_B3[_C3]+this._W4*this._Y4[c]+this._X4*this._Z4[c]-this._T4*this.__4[c]-this._U4*this._05[c];this._Z4[c]=this._Y4[c];
this._Y4[c]=_B3[_C3];this._05[c]=this.__4[c];this.__4[c]=_75;const _D3=(bypass[_C3]!==undefined)?bypass[_C3]:bypass[0];_H3[_C3]=(_D3>0)?_B3[_C3]:_75;}}return this._w3;}_55(_85,_95,_a5){if(_85===this._15&&_95===this._25&&_a5===this._35)return;const _b5=2*Math.PI*_85/sampleRate;const _c5=Math.cos(_b5);const _d5=Math.sqrt(_a5);const _e5=_d5+1;const _f5=_d5-1;const _g5=_e5*_c5;const _h5=_f5*_c5;const _i5=_e5-_h5;const _j5=_e5+_h5;const alpha=Math.sin(_b5)/(2*_95);const _k5=(2*Math.sqrt(_d5)*alpha);const _l5=_i5+_k5;
const _T4=2*(_f5-_g5);const _U4=_i5-_k5;const _V4=_d5*(_j5+_k5);const _W4=-2*_d5*(_f5+_g5);const _X4=_d5*(_j5-_k5);this._T4=_T4/_l5;this._U4=_U4/_l5;this._V4=_V4/_l5;this._W4=_W4/_l5;this._X4=_X4/_l5;this._15=_85;this._25=_95;this._35=_a5;}}registerProcessor("hi-shelf-processor",_R4);class _m5 extends AudioWorkletProcessor{static get parameterDescriptors(){const _n5=sampleRate*0.45;return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"cutoff",automationRate:"a-rate",defaultValue:Math.min(1500.0,
_n5),minValue:10.0,maxValue:_n5},{name:"q",automationRate:"a-rate",defaultValue:1.5,minValue:1.0,maxValue:100.0}];}constructor(_L3){super();this._v3();const _M3=_L3.outputChannelCount[0];this._T4=0;this._U4=0;this._V4=0;this._W4=0;this._X4=0;this._Y4=new Float32Array(_M3);this._Z4=new Float32Array(_M3);this.__4=new Float32Array(_M3);this._05=new Float32Array(_M3);this._o5=-1;this._25=-1;}process(_z3,_A3,parameters){const input=_z3[0];const output=_A3[0];const bypass=parameters.bypass;const cutoff=parameters.cutoff;
const q=parameters.q;const _45=(cutoff.length===1&&q.length===1);if(_45)this._55(cutoff[0],q[0]);for(let c=0;c<input.length;++c){const _B3=input[c];const _H3=output[c];for(let _C3=0;_C3<_B3.length;++_C3){if(_45===false){const c=(cutoff[_C3]!==undefined)?cutoff[_C3]:cutoff[0];const _65=(q[_C3]!==undefined)?q[_C3]:q[0];this._55(c,_65);}const _75=this._V4*_B3[_C3]+this._W4*this._Y4[c]+this._X4*this._Z4[c]-this._T4*this.__4[c]-this._U4*this._05[c];this._Z4[c]=this._Y4[c];this._Y4[c]=_B3[_C3];this._05[c]=this.__4[c];
this.__4[c]=_75;const _D3=(bypass[_C3]!==undefined)?bypass[_C3]:bypass[0];_H3[_C3]=(_D3>0)?_B3[_C3]:_75;}}return this._w3;}_55(_p5,_95){if(_p5===this._o5&&_95===this._25)return;const _b5=2*Math.PI*_p5/sampleRate;const alpha=Math.sin(_b5)/(2*_95);const _c5=Math.cos(_b5);const _l5=1+alpha;const _T4=-2*_c5;const _U4=1-alpha;const _V4=(1+_c5)/2;const _W4=-1-_c5;const _X4=(1+_c5)/2;this._T4=_T4/_l5;this._U4=_U4/_l5;this._V4=_V4/_l5;this._W4=_W4/_l5;this._X4=_X4/_l5;this._o5=_p5;this._25=_95;}}registerProcessor("hpf2-processor",
_m5);class _q5 extends AudioWorkletProcessor{static get parameterDescriptors(){const _S4=sampleRate*0.45;return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(500.0,_S4),minValue:10.0,maxValue:_S4},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(_L3){super();this._v3();const _M3=_L3.outputChannelCount[0];
this._T4=0;this._U4=0;this._V4=0;this._W4=0;this._X4=0;this._Y4=new Float32Array(_M3);this._Z4=new Float32Array(_M3);this.__4=new Float32Array(_M3);this._05=new Float32Array(_M3);this._15=-1;this._25=-1;this._35=-1;}process(_z3,_A3,parameters){const input=_z3[0];const output=_A3[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;const _45=(freq.length===1&&q.length===1&&gain.length===1);if(_45)this._55(freq[0],q[0],gain[0]);for(let c=0;c<input.length;
++c){const _B3=input[c];const _H3=output[c];for(let _C3=0;_C3<_B3.length;++_C3){if(_45===false){const _P3=(freq[_C3]!==undefined)?freq[_C3]:freq[0];const _65=(q[_C3]!==undefined)?q[_C3]:q[0];const _I3=(gain[_C3]!==undefined)?gain[_C3]:gain[0];this._55(_P3,_65,_I3);}const _75=this._V4*_B3[_C3]+this._W4*this._Y4[c]+this._X4*this._Z4[c]-this._T4*this.__4[c]-this._U4*this._05[c];this._Z4[c]=this._Y4[c];this._Y4[c]=_B3[_C3];this._05[c]=this.__4[c];this.__4[c]=_75;const _D3=(bypass[_C3]!==undefined)?bypass[_C3]:bypass[0];
_H3[_C3]=(_D3>0)?_B3[_C3]:_75;}}return this._w3;}_55(_85,_95,_a5){if(_85===this._15&&_95===this._25&&_a5===this._35)return;const _b5=2*Math.PI*_85/sampleRate;const _c5=Math.cos(_b5);const _d5=Math.sqrt(_a5);const _e5=_d5+1;const _f5=_d5-1;const _g5=_e5*_c5;const _h5=_f5*_c5;const _i5=_e5-_h5;const _j5=_e5+_h5;const alpha=Math.sin(_b5)/(2*_95);const _k5=(2*Math.sqrt(_d5)*alpha);const _l5=_j5+_k5;const _T4=-2*(_f5+_g5);const _U4=_j5-_k5;const _V4=_d5*(_i5+_k5);const _W4=2*_d5*(_f5-_g5);const _X4=_d5*(_i5-_k5);this._T4=_T4/_l5;
this._U4=_U4/_l5;this._V4=_V4/_l5;this._W4=_W4/_l5;this._X4=_X4/_l5;this._15=_85;this._25=_95;this._35=_a5;}}registerProcessor("lo-shelf-processor",_q5);class _r5 extends AudioWorkletProcessor{static get parameterDescriptors(){const _n5=sampleRate*0.45;return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"cutoff",automationRate:"a-rate",defaultValue:Math.min(500.0,_n5),minValue:10.0,maxValue:_n5},{name:"q",automationRate:"a-rate",defaultValue:1.5,minValue:1.0,maxValue:100.0}
];}constructor(_L3){super();this._v3();const _M3=_L3.outputChannelCount[0];this._T4=0;this._U4=0;this._V4=0;this._W4=0;this._X4=0;this._Y4=new Float32Array(_M3);this._Z4=new Float32Array(_M3);this.__4=new Float32Array(_M3);this._05=new Float32Array(_M3);this._o5=-1;this._25=-1;}process(_z3,_A3,parameters){const input=_z3[0];const output=_A3[0];const bypass=parameters.bypass;const cutoff=parameters.cutoff;const q=parameters.q;const _45=(cutoff.length===1&&q.length===1);if(_45)this._55(cutoff[0],q[0]);for(let c=0;
c<input.length;++c){const _B3=input[c];const _H3=output[c];for(let _C3=0;_C3<_B3.length;++_C3){if(_45===false){const c=(cutoff[_C3]!==undefined)?cutoff[_C3]:cutoff[0];const _65=(q[_C3]!==undefined)?q[_C3]:q[0];this._55(c,_65);}const _75=this._V4*_B3[_C3]+this._W4*this._Y4[c]+this._X4*this._Z4[c]-this._T4*this.__4[c]-this._U4*this._05[c];this._Z4[c]=this._Y4[c];this._Y4[c]=_B3[_C3];this._05[c]=this.__4[c];this.__4[c]=_75;const _D3=(bypass[_C3]!==undefined)?bypass[_C3]:bypass[0];_H3[_C3]=(_D3>0)?_B3[_C3]:_75;
}}return this._w3;}_55(_p5,_95){if(_p5===this._o5&&_95===this._25)return;const _b5=2*Math.PI*_p5/sampleRate;const alpha=Math.sin(_b5)/(2*_95);const _c5=Math.cos(_b5);const _l5=1+alpha;const _T4=-2*_c5;const _U4=1-alpha;const _V4=(1-_c5)/2;const _W4=1-_c5;const _X4=(1-_c5)/2;this._T4=_T4/_l5;this._U4=_U4/_l5;this._V4=_V4/_l5;this._W4=_W4/_l5;this._X4=_X4/_l5;this._o5=_p5;this._25=_95;}}registerProcessor("lpf2-processor",_r5);class _s5 extends AudioWorkletProcessor{static get parameterDescriptors(){const _S4=sampleRate*0.45;
return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(1500.0,_S4),minValue:10.0,maxValue:_S4},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(_L3){super();this._v3();const _M3=_L3.outputChannelCount[0];this._T4=0;this._U4=0;this._V4=0;this._W4=0;this._X4=0;this._Y4=new Float32Array(_M3);this._Z4=new Float32Array(_M3);
this.__4=new Float32Array(_M3);this._05=new Float32Array(_M3);this._15=-1;this._25=-1;this._35=-1;}process(_z3,_A3,parameters){const input=_z3[0];const output=_A3[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;const _45=(freq.length===1&&q.length===1&&gain.length===1);if(_45)this._55(freq[0],q[0],gain[0]);for(let c=0;c<input.length;++c){const _B3=input[c];const _H3=output[c];for(let _C3=0;_C3<_B3.length;++_C3){if(_45===false){const _P3=(freq[_C3]!==undefined)?freq[_C3]:freq[0];
const _65=(q[_C3]!==undefined)?q[_C3]:q[0];const _I3=(gain[_C3]!==undefined)?gain[_C3]:gain[0];this._55(_P3,_65,_I3);}const _75=this._V4*_B3[_C3]+this._W4*this._Y4[c]+this._X4*this._Z4[c]-this._T4*this.__4[c]-this._U4*this._05[c];this._Z4[c]=this._Y4[c];this._Y4[c]=_B3[_C3];this._05[c]=this.__4[c];this.__4[c]=_75;const _D3=(bypass[_C3]!==undefined)?bypass[_C3]:bypass[0];_H3[_C3]=(_D3>0)?_B3[_C3]:_75;}}return this._w3;}_55(_85,_95,_a5){if(_85===this._15&&_95===this._25&&_a5===this._35)return;const _b5=2*Math.PI*_85/sampleRate;
const _c5=Math.cos(_b5);const _d5=Math.sqrt(_a5);const alpha=Math.sin(_b5)/(2*_95);const _t5=alpha/_d5;const _u5=alpha*_d5;const _l5=1+_t5;const _T4=-2*_c5;const _U4=1-_t5;const _V4=1+_u5;const _W4=_T4;const _X4=1-_u5;this._T4=_T4/_l5;this._U4=_U4/_l5;this._V4=_V4/_l5;this._W4=_W4/_l5;this._X4=_X4/_l5;this._15=_85;this._25=_95;this._35=_a5;}}registerProcessor("peak-eq-processor",_s5);class _v5{constructor(_w5){this._x5=0;this._y5=0;this.feedback=0;this._z5=0;this.buffer=new Float32Array(_w5);this._A5=0;}process(_E4){
const out=this.buffer[this._A5];this._z5=(this._z5*this._x5)+(out*this._y5);this.buffer[this._A5]=_E4+(this._z5*this.feedback);++this._A5;this._A5%=this.buffer.length;return out;}_B5(_C5){this.feedback=Math.min(Math.max(0,_C5),1);}_D5(_E5){this._x5=Math.min(Math.max(0,_E5),1);this._y5=1-this._x5;}}class _F5{constructor(_w5){this.feedback=0;this.buffer=new Float32Array(_w5);this._A5=0;}process(_E4){const out=this.buffer[this._A5];this.buffer[this._A5]=_E4+(out*this.feedback);++this._A5;this._A5%=this.buffer.length;
return(out-_E4);}_B5(_C5){this.feedback=Math.min(Math.max(0,_C5),1);}}class _G5 extends AudioWorkletProcessor{static _H5=8;static _I5=4;static _J5=0.015;static _K5=0.4;static _L5=0.28;static _M5=0.7;static _N5=[1116,1188,1277,1356,1422,1491,1557,1617];static _O5=[1139,1211,1300,1379,1445,1514,1580,1640];static _P5=[556,441,341,225];static _Q5=[579,464,364,248];static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"size",automationRate:"a-rate",
defaultValue:0.7,minValue:0.0,maxValue:1.0},{name:"damp",automationRate:"a-rate",defaultValue:0.1,minValue:0.0,maxValue:1.0},{name:"mix",automationRate:"a-rate",defaultValue:0.35,minValue:0.0,maxValue:1.0}];}constructor(_L3){super();this._v3();const _M3=_L3.outputChannelCount[0];this._R5=-1;this._S5=-1;this._T5=new Array(_M3);this._U5=new Array(_M3);const _V5=[_G5._N5,_G5._O5];const _W5=[_G5._P5,_G5._Q5];for(let c=0;c<_M3;++c){this._T5[c]=new Array(_G5._H5);this._U5[c]=new Array(_G5._I5);for(let i=0;i<_G5._H5;
++i)this._T5[c][i]=new _v5(_V5[c%_V5.length][i]);for(let i=0;i<_G5._I5;++i)this._U5[c][i]=new _F5(_W5[c%_W5.length][i]);}this._X5(0.5);this._D5(0.5);for(let c=0;c<_M3;++c)for(let i=0;i<_G5._I5;++i)this._U5[c][i]._B5(0.5);}process(_z3,_A3,parameters){const input=_z3[0];const output=_A3[0];const bypass=parameters.bypass;const size=parameters.size;const damp=parameters.damp;const mix=parameters.mix;for(let c=0;c<input.length;++c){const _B3=input[c];const _H3=output[c];for(let _Y5=0;_Y5<_B3.length;++_Y5){const _C3=(size[_Y5]!==undefined)?size[_Y5]:size[0];
const _Z5=(damp[_Y5]!==undefined)?damp[_Y5]:damp[0];this._X5(_C3);this._D5(_Z5);_H3[_Y5]=_B3[_Y5];let out=0;const _Q3=_B3[_Y5]*_G5._J5;for(let i=0;i<_G5._H5;++i)out+=this._T5[c][i].process(_Q3);for(let i=0;i<_G5._I5;++i)out=this._U5[c][i].process(out);const _D3=(bypass[_Y5]!==undefined)?bypass[_Y5]:bypass[0];if(_D3>0.0){continue;}const _S3=(mix[_Y5]!==undefined)?mix[_Y5]:mix[0];_H3[_Y5]*=(1-_S3);_H3[_Y5]+=(out*_S3);}}return this._w3;}_X5(_w5){if(_w5===this._R5)return;const size=(_w5*_G5._L5)+_G5._M5;for(let c=0;
c<this._T5.length;++c)for(let i=0;i<_G5._H5;++i)this._T5[c][i]._B5(size);this._R5=_w5;}_D5(_E5){if(_E5===this._S5)return;const damp=_E5*_G5._K5;for(let c=0;c<this._T5.length;++c)for(let i=0;i<_G5._H5;++i)this._T5[c][i]._D5(damp);this._S5=_E5;}}registerProcessor("reverb1-processor",_G5);class __5 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"rate",automationRate:"a-rate",defaultValue:5.0,minValue:0.0,
maxValue:20.0},{name:"intensity",automationRate:"a-rate",defaultValue:1.0,minValue:0.0,maxValue:1.0},{name:"offset",automationRate:"a-rate",defaultValue:0.0,minValue:0.0,maxValue:1.0},{name:"shape",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:4}];}constructor(_L3){super();this._v3();const _M3=_L3.outputChannelCount[0];this._06=new Array(_M3).fill(1.0);this._16=new Array(_M3).fill(0.0);this._26=new Array(_M3).fill(_36._46._56);this._66=new Array(_M3);for(let c=0;c<_M3;++c){this._66[c]=new _76();
this._66[c]._86(sampleRate);this._66[c]._96(this._06[c]);this._66[c]._a6(this._26[c]);if(c%2===1){this._66[c]._b6(this._16[c]);}}}process(_z3,_A3,parameters){const input=_z3[0];const output=_A3[0];const bypass=parameters.bypass;const rate=parameters.rate;const intensity=parameters.intensity;const offset=parameters.offset;const shape=parameters.shape;for(let c=0;c<input.length;++c){const _B3=input[c];const _H3=output[c];for(let _C3=0;_C3<_B3.length;++_C3){_H3[_C3]=_B3[_C3];const _R3=(rate[_C3]!==undefined)?rate[_C3]:rate[0];
const _c6=(offset[_C3]!==undefined)?offset[_C3]:offset[0];const _d6=(shape[_C3]!==undefined)?shape[_C3]:shape[0];this._e6(c,_R3,_c6,_d6);const _f6=this._66[c]._w4();const _D3=(bypass[_C3]!==undefined)?bypass[_C3]:bypass[0];if(_D3>0.0){continue;}const i=(intensity[_C3]!==undefined)?intensity[_C3]:intensity[0];const out=_B3[_C3]*_f6*i;_H3[_C3]*=(1.0-i);_H3[_C3]+=out;}}return this._w3;}_e6(_y4,_g6,_h6,_i6){if(_g6!==this._06[_y4]){this._66[_y4]._96(_g6);this._06[_y4]=_g6;}if(_h6!==this._16[_y4]){if(_y4%2===1){
this._66[_y4]._b6(_h6);}this._16[_y4]=_h6;}if(_i6!==this._26[_y4]){this._66[_y4]._a6(_i6);this._26[_y4]=_i6;}}}registerProcessor("tremolo-processor",__5);function _36(){}_36._46={_56:0,_j6:1,_k6:2,_l6:3,_m6:4,_n6:5};_36._o6=function(_p6){return 1.0-_p6;};_36._q6=function(_p6){return _p6;};_36._r6=function(_p6){return 0.5*(Math.sin((_p6*2.0*Math.PI)-(Math.PI/2.0))+1.0);};_36._s6=function(_p6){if(_p6<0.5){return 0.0;}return 1.0;};_36._t6=function(_p6){if(_p6<0.5){return 2.0*_p6;}return 2.0-(2.0*_p6);};_36._u6=[_36._o6,
_36._q6,_36._r6,_36._s6,_36._t6];_v6._w6=512;_v6._x6=1.0/_v6._w6;function _v6(_y6){this.data=new Float32Array(_v6._w6);for(let i=0;i<_v6._w6;++i){this.data[i]=_y6(i*_v6._x6);}}_v6.prototype._w4=function(_p6){_p6=Math.max(0.0,_p6);_p6=Math.min(_p6,1.0);const _z6=_p6*_v6._w6;const _A6=~~_z6;const _B6=_z6-_A6;let _A4=_A6;let _B4=_A4+1;if(_A4>=_v6._w6){_A4-=_v6._w6;}if(_B4>=_v6._w6){_B4-=_v6._w6;}const _C4=this.data[_A4];const _D4=this.data[_B4];return _C4+(_D4-_C4)*_B6;};_76._C6=[];_76._D6=false;_76._E6=0.0;_76._S4=20.0;
function _76(){this._F6=48000;this.shape=_36._46._k6;this.freq=1.0;this._G6=0.0;this._x6=0.0;this._H6=0.0;if(_76._D6==true){return;}for(let i=0;i<_36._46._n6;++i){_76._C6[i]=new _v6(_36._u6[i]);}_76._D6=true;}_76._I6=function(){return(_76._D6==true);};_76.prototype._86=function(_J6){this._F6=_J6;this._K6();};_76.prototype._96=function(_85){_85=Math.max(_76._E6,_85);_85=Math.min(_85,_76._S4);this.freq=_85;this._K6();};_76.prototype._b6=function(_h6){_h6=Math.max(0.0,_h6);_h6=Math.min(_h6,1.0);const _L6=_h6-this._H6;
this._H6=_h6;this._G6+=_L6;while(this._G6>=1.0){this._G6-=1.0;}while(this._G6<0.0){this._G6+=1.0;}};_76.prototype._a6=function(_i6){_i6=Math.max(0,_i6);_i6=Math.min(_i6,_36._46._n6-1);this.shape=_i6;};_76.prototype._w4=function(){const result=_76._C6[this.shape]._w4(this._G6);this._G6+=this._x6;while(this._G6>=1.0){this._G6-=1.0;}return result;};_76.prototype._K6=function(){this._x6=this.freq/this._F6;};